# this_file: /root/repo/.github/workflows/nightly.yml

name: Nightly Build

on:
  schedule:
    # Run every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual trigger

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer

jobs:
  nightly:
    name: Nightly Build
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
      
    - name: Show versions
      run: |
        xcodebuild -version
        swift --version
        
    - name: Cache Swift Package Manager
      uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Generate version information
      run: |
        chmod +x scripts/version.sh
        ./scripts/version.sh
        
    - name: Run tests
      run: |
        chmod +x scripts/test.sh
        ./scripts/test.sh --coverage --junit
        
    - name: Build nightly
      run: |
        chmod +x scripts/build.sh
        ./scripts/build.sh --release --archive
        
    - name: Create nightly tag
      run: |
        DATE=$(date +%Y%m%d)
        COMMIT=$(git rev-parse --short HEAD)
        NIGHTLY_TAG="nightly-$DATE-$COMMIT"
        
        # Create a lightweight tag for nightly builds
        git tag "$NIGHTLY_TAG"
        
        echo "NIGHTLY_TAG=$NIGHTLY_TAG" >> $GITHUB_ENV
        echo "NIGHTLY_DATE=$DATE" >> $GITHUB_ENV
        echo "NIGHTLY_COMMIT=$COMMIT" >> $GITHUB_ENV
        
    - name: Upload nightly artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dragoboo-nightly-${{ env.NIGHTLY_DATE }}
        path: |
          archives/
          build/
          coverage/
        retention-days: 30
        
    - name: Create nightly release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.NIGHTLY_TAG }}
        release_name: Nightly Build ${{ env.NIGHTLY_DATE }}
        body: |
          # Nightly Build ${{ env.NIGHTLY_DATE }}
          
          This is an automated nightly build from commit ${{ env.NIGHTLY_COMMIT }}.
          
          **⚠️ This is a development build and may be unstable.**
          
          ## Installation
          
          1. Download the `Dragoboo-nightly-${{ env.NIGHTLY_DATE }}-macos.zip` file
          2. Extract and place Dragoboo.app in your Applications folder
          3. Launch and grant accessibility permissions
          
          ## Changes
          
          This build includes the latest changes from the main branch.
          
          ## Requirements
          
          - macOS 13.0 or later
          - Accessibility permissions
        draft: false
        prerelease: true
        
    - name: Clean up old nightly releases
      run: |
        # Keep only the last 7 nightly releases
        echo "Cleaning up old nightly releases..."
        
        # This would require additional scripting to clean up old releases
        # For now, just show what would be done
        echo "Would clean up nightly releases older than 7 days"
        
    - name: Report test coverage
      run: |
        if [ -f "coverage/summary.txt" ]; then
          echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat coverage/summary.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Report build status
      run: |
        echo "## Nightly Build Status" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Date:** ${{ env.NIGHTLY_DATE }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ env.NIGHTLY_COMMIT }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag:** ${{ env.NIGHTLY_TAG }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** ✅ Success" >> $GITHUB_STEP_SUMMARY
        
  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: nightly
    if: failure()
    
    steps:
    - name: Notify nightly failure
      run: |
        echo "Nightly build failed!"
        # Add notification logic here (Slack, Discord, etc.)
        # This could send alerts to developers about broken builds
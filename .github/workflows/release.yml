# this_file: /root/repo/.github/workflows/release.yml

name: Release

on:
  push:
    tags:
      - 'v*'

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer

jobs:
  release:
    name: Create Release
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get tag name
      id: tag
      run: |
        echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
      
    - name: Show versions
      run: |
        xcodebuild -version
        swift --version
        
    - name: Cache Swift Package Manager
      uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Generate version information
      run: |
        chmod +x scripts/version.sh
        ./scripts/version.sh
        
    - name: Run tests
      run: |
        chmod +x scripts/test.sh
        ./scripts/test.sh --coverage
        
    - name: Build release
      run: |
        chmod +x scripts/build.sh
        ./scripts/build.sh --release --archive
        
    - name: Generate release notes
      id: notes
      run: |
        # Get previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # Generate changelog
        if [ -n "$PREV_TAG" ]; then
          CHANGELOG=$(git log --oneline "$PREV_TAG..HEAD" | sed 's/^/- /')
        else
          CHANGELOG=$(git log --oneline | head -20 | sed 's/^/- /')
        fi
        
        # Create release notes
        cat > release_notes.md << EOF
        # Release ${{ steps.tag.outputs.tag }}
        
        ## Changes
        
        $CHANGELOG
        
        ## Installation
        
        ### macOS
        
        1. Download the \`Dragoboo-${{ steps.tag.outputs.tag }}-macos.dmg\` file
        2. Open the DMG and drag Dragoboo to your Applications folder
        3. Launch Dragoboo from Applications
        4. Grant accessibility permissions when prompted
        
        ### Manual Installation
        
        1. Download the \`Dragoboo-${{ steps.tag.outputs.tag }}-macos.zip\` file
        2. Extract and place Dragoboo.app in your Applications folder
        3. Launch and grant accessibility permissions
        
        ## Requirements
        
        - macOS 13.0 or later
        - Accessibility permissions
        
        ## What's New
        
        For detailed changes, see the commit history above.
        EOF
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        release_name: ${{ steps.tag.outputs.tag }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(steps.tag.outputs.tag, '-pre') || contains(steps.tag.outputs.tag, '-beta') || contains(steps.tag.outputs.tag, '-alpha') }}
        
    - name: Upload ZIP Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./archives/Dragoboo-${{ steps.tag.outputs.tag }}-macos.zip
        asset_name: Dragoboo-${{ steps.tag.outputs.tag }}-macos.zip
        asset_content_type: application/zip
        
    - name: Upload DMG Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./archives/Dragoboo-${{ steps.tag.outputs.tag }}-macos.dmg
        asset_name: Dragoboo-${{ steps.tag.outputs.tag }}-macos.dmg
        asset_content_type: application/octet-stream
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts-${{ steps.tag.outputs.version }}
        path: |
          archives/
          build/
          coverage/
          
  homebrew:
    name: Update Homebrew
    runs-on: macos-latest
    needs: release
    if: "!contains(github.ref, '-pre') && !contains(github.ref, '-beta') && !contains(github.ref, '-alpha')"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get release info
      id: release
      run: |
        echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
    - name: Calculate SHA256
      id: sha256
      run: |
        SHA256=$(shasum -a 256 archives/Dragoboo-${{ steps.release.outputs.tag }}-macos.zip | cut -d' ' -f1)
        echo "sha256=$SHA256" >> $GITHUB_OUTPUT
        
    - name: Update Homebrew Formula
      run: |
        # This would update a homebrew formula
        # For now, just show what would be done
        echo "Would update Homebrew formula with:"
        echo "  Version: ${{ steps.release.outputs.version }}"
        echo "  URL: https://github.com/${{ github.repository }}/releases/download/${{ steps.release.outputs.tag }}/Dragoboo-${{ steps.release.outputs.tag }}-macos.zip"
        echo "  SHA256: ${{ steps.sha256.outputs.sha256 }}"
        
        # To actually update Homebrew, you would:
        # 1. Fork homebrew/homebrew-cask
        # 2. Update the formula
        # 3. Create a pull request
        # This requires additional setup and permissions
        
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [release, homebrew]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.release.result == 'success'
      run: |
        echo "Release ${{ github.ref }} completed successfully!"
        # Add notification logic here (Slack, Discord, etc.)
        
    - name: Notify failure
      if: needs.release.result == 'failure'
      run: |
        echo "Release ${{ github.ref }} failed!"
        # Add notification logic here (Slack, Discord, etc.)